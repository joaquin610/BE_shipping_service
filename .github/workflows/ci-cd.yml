name: Java CI/CD with Maven

on:
  push:
    branches: [ "main", "develop", "testing" ]
  pull_request:
    branches: [ "main", "develop", "testing" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Run tests
        run: mvn test
  
  sonarcloud:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Build and test with Maven
        run: mvn clean verify

      - name: Cache SonarCloud packages
        uses: actions/cache@v2
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar-${{ hashFiles('/.gradle', '/*.gradle.kts', '**/pom.xml') }}

      - name: Run SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.9.1.2184:sonar \
            -Dsonar.projectKey=joaquin610_BE_products_service \
            -Dsonar.organization=joaquin610 \
            -Dsonar.host.url=https://sonarcloud.io/ \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.java.binaries=target/classes \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
            -Dsonar.report.export.path=target/sonar-report \
            -Dsonar.report.export.format=html
      
      - name: Publish SonarCloud HTML Report
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: sonarcloud-html-report
          path: target/site/jacoco


  cd:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: "us-east-1"

      - name: Log in to Amazon ECR
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Build and push Docker image
        env:
          ECR_REPOSITORY:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t ${{ secrets.ECR_REGISTRY }}/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push ${{ secrets.ECR_REGISTRY }}/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Register new task definition
        id: register-task
        env:
          ECR_REPOSITORY: shipping-service-repo
          IMAGE_TAG: ${{ github.sha }}
          EXECUTION_ROLE_ARN: ${{ secrets.ECS_EXECUTION_ROLE_ARN }}
        run: |
          TASK_DEF=$(cat <<EOF
          {
            "family": "shipping-service",
            "networkMode": "awsvpc",
            "executionRoleArn": "$EXECUTION_ROLE_ARN",
            "containerDefinitions": [
              {
                "name": "app",
                "image": "${{ secrets.ECR_REGISTRY }}/$ECR_REPOSITORY:$IMAGE_TAG",
                "essential": true,
                "memory": 512,
                "cpu": 256,
                "portMappings": [
                  {
                    "containerPort": 80,
                    "hostPort": 80
                  }
                ]
              }
            ],
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512"
          }
          EOF
          )
          echo "$TASK_DEF" > taskdef.json
          aws ecs register-task-definition --cli-input-json file://taskdef.json
      
      - name: Update ECS service with new image
        env:
          CLUSTER_NAME: main-ecs-cluster
          SERVICE_NAME: BE_Shipping_Service
          CONTAINER_NAME: app
        run: |
          TASK_FAMILY="shipping-service"
          REVISION=$(aws ecs describe-task-definition --task-definition $TASK_FAMILY | jq .taskDefinition.revision)
      
      
      
     
