name: Java CI/CD with Maven

on:
  push:
    branches: [ "main", "develop", "testing" ]
  pull_request:
    branches: [ "main", "develop", "testing" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Run tests
        run: mvn test
  
  sonarCloudReport:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Make get_sonar_report_url.sh executable
        run: chmod +x get_sonar_report_url.sh

      - name: Get SonarCloud Report URL
        run: ./get_sonar_report_url.sh

  test:
    runs-on: ubuntu-latest
    needs: sonarCloudReport

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Install Newman and HTML Reporter
        run: |
          npm install -g newman
          npm install -g newman-reporter-html

      - name: Grant execution permission for run_tests.sh
        run: chmod +x ./run_tests.sh

      - name: Run Postman Tests
        run: ./run_tests.sh

      - name: Archive HTML Report
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: newman-html-report
          path: newman-report.html

  cd:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: "us-east-1"

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Build and push Docker image
        env:
          DOCKER_HUB_REPOSITORY: banchero/be_shipping_service
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $DOCKER_HUB_REPOSITORY:$IMAGE_TAG .
          docker push $DOCKER_HUB_REPOSITORY:$IMAGE_TAG

      - name: Register new task definition
        id: register-task
        env:
          DOCKER_HUB_REPOSITORY: banchero/be_shipping_service
          IMAGE_TAG: ${{ github.sha }}
          EXECUTION_ROLE_ARN: ${{ secrets.ECS_EXECUTION_ROLE_ARN }}
        run: |
          TASK_DEF=$(cat <<EOF
          {
            "family": "shipping-service",
            "networkMode": "awsvpc",
            "executionRoleArn": "$EXECUTION_ROLE_ARN",
            "containerDefinitions": [
              {
                "name": "app",
                "image": "$DOCKER_HUB_REPOSITORY:$IMAGE_TAG",
                "essential": true,
                "memory": 512,
                "cpu": 256,
                "portMappings": [
                  {
                    "containerPort": 80,
                    "hostPort": 80
                  }
                ]
              }
            ],
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512"
          }
          EOF
          )
          echo "$TASK_DEF" > taskdef.json
          aws ecs register-task-definition --cli-input-json file://taskdef.json

      - name: Update ECS service with new image
        env:
          CLUSTER_NAME: main-ecs-cluster
          SERVICE_NAME: BE_Shipping_Service
          CONTAINER_NAME: app
        run: |
          TASK_FAMILY="shipping-service"
          REVISION=$(aws ecs describe-task-definition --task-definition $TASK_FAMILY | jq .taskDefinition.revision)
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition ${TASK_FAMILY}:${REVISION}
      
      
      
     
